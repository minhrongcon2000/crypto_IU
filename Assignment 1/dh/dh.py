import secrets

# Firstly, generator and modulus need to be generated. However, the procedure needs lots of computational power
# since check primality of a large number is still an unsolved problem in Computer Science.
# Therefore, we use pre-computed generator and modulus from https://tools.ietf.org/html/rfc3526.
# The larger the group, the more computational resource and time it takes to calculate secret keys
# Note: group 5 has been cracked.
SHARED_KEY = {
    # 1536-bit MODP Group
    5: {
        "p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF,
        "g": 2
    },

    # 2048-bit MODP Group
    14: {
        "p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AACAA68FFFFFFFFFFFFFFFF,
        "g": 2
    },

    # 3072-bit MODP Group
    15: {
        "p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF,
        "g": 2
    },

    # 4096-bit MODP Group
    16: {
        "p": 0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A92108011A723C12A787E6D788719A10BDBA5B2699C327186AF4E23C1A946834B6150BDA2583E9CA2AD44CE8DBBBC2DB04DE8EF92E8EFC141FBECAA6287C59474E6BC05D99B2964FA090C3A2233BA186515BE7ED1F612970CEE2D7AFB81BDD762170481CD0069127D5B05AA993B4EA988D8FDDC186FFB7DC90A6C08F4DF435C934063199FFFFFFFFFFFFFFFF,
        "g": 2
    },

    # 6144-bit MODP Group
    17: {
        "p": 0x
        "g": 2
    },

    # 8192-bit MODP Group
    18: {
        "p": 0x
        "g": 2
    }
}


class User(object):
    def __init__(self, username, private_key):
        super().__init__()
        self.__username = username
        self.__private_key = private_key

        # for saving user's messages
        self.__receivedMessage = []
        self.__sendMessage = []

    def __repr__(self):
        return "User(username={}, private_key={})".format(self.__username, self.__private_key)

    def send(self, user, message):
        user.__receivedMessage.append(message)
        self.__sendMessage.append(message)

    def generatePublicKey(self, generator, modulus):
        self.__public_key = pow(generator, self.__private_key, modulus)

    @property
    def private_key(self):
        return self.__private_key

    @property
    def public_key(self):
        return self.__public_key

    @property
    def sendMessage(self):
        return self.__sendMessage

    @property
    def receivedMessage(self):
        return self.__receivedMessage

    @property
    def username(self):
        return self.__username


class DHSystem(object):
    def __init__(self):
        self.__users = {}
        self.__messages = []
        self.__modulus = None
        self.__generator = None

    def addUsers(self, username, private_key):
        self.__users[username] = User(username, private_key)
        self.__users[username].generatePublicKey(
            self.__generator, self.__modulus)

    def createMessage(self, sender, receiver, content):
        message = Message(
            self.__users[sender], self.__users[receiver], content)
        self.__messages.append(message)
        self.__users[sender].send(self.__users[receiver], message)

    def getPublicKey(self, username):
        return self.__users[username].public_key

    def getSecretKey(self):
        if len(self.__users) == 0:
            raise Exception("No user has been created!")
        if len(self.__messages) == 0:
            raise Exception("No message has been sent!")

        secret_keys_both_side = []
        for (username, props) in self.__users.items():
            secret_keys_both_side.append(pow(
                self.__users[username].receivedMessage[0].content, self.__users[username].private_key, self.__modulus))
        assert secret_keys_both_side[0] == secret_keys_both_side[1]
        return secret_keys_both_side[0]

    @property
    def users(self):
        return self.__users

    @property
    def messages(self):
        return self.__messages

    @property
    def generator(self):
        return self.__generator

    @property
    def modulus(self):
        return self.__modulus

    @generator.setter
    def generator(self, generator):
        self.__generator = generator

    @modulus.setter
    def modulus(self, modulus):
        self.__modulus = modulus


class Message(object):
    def __init__(self, sender, receiver, content):
        super().__init__()
        self.__sender = sender
        self.__receiver = receiver
        self.__content = content

    def __repr__(self):
        return "Message(sender={}, receiver={}, content={})".format(self.__sender, self.__receiver, self.__content)

    @property
    def sender(self):
        return self.__sender

    @property
    def receiver(self):
        return self.__receiver

    @property
    def content(self):
        return self.__content


# class DiffieHellman(object):
#     secret_bit = 128

#     def __init__(self, group=14):
#         super().__init__()
#         self.__group = group
#         self.__modulus, self.__generator = self.__generateSharedKey()
#         self.__messages = []
#         self.__users = []

#     def createUser(self):
#         alice = User("Alice", secrets.randbits(DiffieHellman.secret_bit))
#         alice.createPublicKey(self.__modulus, self.__generator)

#         bob = User("Bob", secrets.randbits(DiffieHellman.secret_bit))
#         bob.createPublicKey(self.__modulus, self.__generator)

#         self.__users.append(alice)
#         self.__users.append(bob)
#         return alice, bob

#     def createMessageFromAToB(self, a, b):
#         a.send(b, a.public_key)
#         self.__messages.append(Message(a, b, a.public_key))

#     def __generateSharedKey(self):
#         return SHARED_KEY[self.__group]["p"], SHARED_KEY[self.__group]["g"]

#     @property
#     def messages(self):
#         return self.__messages

#     @property
#     def modulus(self):
#         return self.__modulus

#     @property
#     def generator(self):
#         return self.__generator


# dh = DiffieHellman()
# alice, bob = dh.createUser()
# dh.createMessageFromAToB(alice, bob)
# dh.createMessageFromAToB(bob, alice)

# message_content = list(map(lambda message: message.content, dh.messages))
# print(pow(message_content[0], bob.private_key, dh.modulus) == pow(
#     message_content[1], alice.private_key, dh.modulus))
